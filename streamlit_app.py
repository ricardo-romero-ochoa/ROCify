
#!/usr/bin/env python
# coding: utf-8

# ------------------------------------------------------------------------------
# ROCify: Automated ROC Analysis for TCGA Genes
# ¬© 2025 DataBiotica. All rights reserved.
# ------------------------------------------------------------------------------


import streamlit as st
from data_processing import run_data_pipeline
from roc_analysis import run_roc_analysis
from PIL import Image
import pandas as pd
import os

# ‚úÖ Must be first
st.set_page_config(
    page_title="ROCify",
    page_icon="üíª",
    layout="wide"
)

subprocess.run(["Rscript", "install_packages.R"], check=True)


# ‚úÖ Branding
logo = Image.open("assets/logo.png")
st.image(logo, width=150)

st.title("üíª ROCify: Automated ROC Analysis for TCGA Genes")
st.caption("ROC curves and optimal cutoffs analyses for biomarker prognosis.")


# TCGA Project Selection with Descriptions
tcga_projects = {
    "ACC ‚Äì Adrenocortical carcinoma": "TCGA-ACC",
    "BLCA ‚Äì Bladder Urothelial Carcinoma": "TCGA-BLCA",
    "BRCA ‚Äì Breast invasive carcinoma": "TCGA-BRCA",
    "CESC ‚Äì Cervical squamous cell carcinoma and endocervical adenocarcinoma": "TCGA-CESC",
    "CHOL ‚Äì Cholangio carcinoma": "TCGA-CHOL",
    "COAD ‚Äì Colon adenocarcinoma": "TCGA-COAD",
    "DLBC ‚Äì Lymphoid Neoplasm Diffuse Large B-cell Lymphoma": "TCGA-DLBC",
    "ESCA ‚Äì Esophageal carcinoma": "TCGA-ESCA",
    "GBM ‚Äì Glioblastoma multiforme": "TCGA-GBM",
    "HNSC ‚Äì Head and Neck squamous cell carcinoma": "TCGA-HNSC",
    "KICH ‚Äì Kidney Chromophobe": "TCGA-KICH",
    "KIRC ‚Äì Kidney renal clear cell carcinoma": "TCGA-KIRC",
    "KIRP ‚Äì Kidney renal papillary cell carcinoma": "TCGA-KIRP",
    "LAML ‚Äì Acute Myeloid Leukemia": "TCGA-LAML",
    "LGG ‚Äì Brain Lower Grade Glioma": "TCGA-LGG",
    "LIHC ‚Äì Liver hepatocellular carcinoma": "TCGA-LIHC",
    "LUAD ‚Äì Lung adenocarcinoma": "TCGA-LUAD",
    "LUSC ‚Äì Lung squamous cell carcinoma": "TCGA-LUSC",
    "MESO ‚Äì Mesothelioma": "TCGA-MESO",
    "OV ‚Äì Ovarian serous cystadenocarcinoma": "TCGA-OV",
    "PAAD ‚Äì Pancreatic adenocarcinoma": "TCGA-PAAD",
    "PCPG ‚Äì Pheochromocytoma and Paraganglioma": "TCGA-PCPG",
    "PRAD ‚Äì Prostate adenocarcinoma": "TCGA-PRAD",
    "READ ‚Äì Rectum adenocarcinoma": "TCGA-READ",
    "SARC ‚Äì Sarcoma": "TCGA-SARC",
    "SKCM ‚Äì Skin Cutaneous Melanoma": "TCGA-SKCM",
    "STAD ‚Äì Stomach adenocarcinoma": "TCGA-STAD",
    "TGCT ‚Äì Testicular Germ Cell Tumors": "TCGA-TGCT",
    "THCA ‚Äì Thyroid carcinoma": "TCGA-THCA",
    "THYM ‚Äì Thymoma": "TCGA-THYM",
    "UCEC ‚Äì Uterine Corpus Endometrial Carcinoma": "TCGA-UCEC",
    "UCS ‚Äì Uterine Carcinosarcoma": "TCGA-UCS",
    "UVM ‚Äì Uveal Melanoma": "TCGA-UVM"
}

# Initialize session state
if "analysis_complete" not in st.session_state:
    st.session_state.analysis_complete = False

if st.button("üîÑ Reset and Clear Results"):
    st.session_state.analysis_complete = False
    for f in ["outputs/roc_curves.png", "outputs/auc_results.csv", "outputs/optimal_cutoffs.csv", "expr_data.csv"]:
        if os.path.exists(f):
            os.remove(f)
    st.experimental_rerun()

selected_label = st.selectbox("Choose a cancer type:", list(tcga_projects.keys()))
tcga_project = tcga_projects[selected_label]
genes_input = st.text_input("Enter one or more genes (comma-separated), below are just examples", "CDK1,AURKB,CCNA2")

if st.button("Run Analysis"):
    genes = [g.strip() for g in genes_input.split(",")]
    st.info("‚ö†Ô∏è Downloading and processing TCGA data can take several minutes. Please be patient.")

    with st.status("Step 1 of 2: Downloading and processing TCGA data. This may take a few minutes...", expanded=True):
        st.write("üîÑ Contacting GDC API and downloading raw counts...")
        run_data_pipeline(tcga_project, genes)

    with st.status("Step 2 of 2: Performing ROC analysis...", expanded=True):
        st.write("üìä Calculating AUC and generating plots...")
        run_roc_analysis(genes)

    st.session_state.analysis_complete = True
    st.success("Analysis Complete!")

if st.session_state.analysis_complete:
    if os.path.exists("outputs/roc_curves.png"):
        st.image("outputs/roc_curves.png", caption="ROC Curves")
    else:
        st.warning("ROC plot not found.")

    if os.path.exists("outputs/auc_results.csv"):
        auc_df = pd.read_csv("outputs/auc_results.csv")
        st.subheader("AUC Results")
        st.write(auc_df)
        st.download_button("Download AUC Results", auc_df.to_csv(index=False), "auc_results.csv")

    if os.path.exists("outputs/optimal_cutoffs.csv"):
        cutoff_df = pd.read_csv("outputs/optimal_cutoffs.csv")
        st.subheader("Optimal Cutoffs")
        st.write(cutoff_df)
        st.download_button("Download Optimal Cutoffs", cutoff_df.to_csv(index=False), "optimal_cutoffs.csv")


# ----------------------------------------------------------------------
# Footer
# ----------------------------------------------------------------------
st.markdown("---")
st.caption("¬© 2025 DataBiotica / ROCify. All rights reserved.")
